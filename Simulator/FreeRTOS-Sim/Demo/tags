!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABORT_DELAY_H	include/AbortDelay.h	71;"	d
BLOCKING_QUEUE_PARAMETERS	BlockQ.c	/^typedef struct BLOCKING_QUEUE_PARAMETERS$/;"	s	file:
BLOCK_Q_H	include/BlockQ.h	71;"	d
BLOCK_TIME_TEST_H	include/blocktim.h	71;"	d
COUNT_SEMAPHORE_TEST_H	include/countsem.h	71;"	d
COUNT_SEM_STRUCT	countsem.c	/^typedef struct COUNT_SEM_STRUCT$/;"	s	file:
DYNAMIC_MANIPULATION_H	include/dynamic.h	71;"	d
EVENT_GROUPS_DEMO_H	include/EventGroupsDemo.h	79;"	d
FLOP_TASKS_H	include/flop.h	71;"	d
GEN_Q_TEST_H	include/GenQTest.h	71;"	d
INTEGER_TASKS_H	include/integer.h	71;"	d
INT_SEM_TEST_H	include/IntSemTest.h	71;"	d
POLLED_Q_H	include/PollQ.h	71;"	d
QUEUE_OVERWRITE_H	include/QueueOverwrite.h	71;"	d
QUEUE_SET_POLLING_H	include/QueueSetPolling.h	71;"	d
QUEUE_WAIT_MULTIPLE_H	include/QueueSet.h	71;"	d
Q_PEEK_TEST_H	include/QPeek.h	71;"	d
RECURSIVE_MUTEX_TEST_H	include/recmutex.h	71;"	d
SEMAPHORE_PARAMETERS	semtest.c	/^typedef struct SEMAPHORE_PARAMETERS$/;"	s	file:
SEMAPHORE_TEST_H	include/semtest.h	71;"	d
SUICIDE_TASK_H	include/death.h	71;"	d
TASK_NOTIFY_H	include/TaskNotify.h	71;"	d
TIMER_DEMO_H	include/TimerDemo.h	71;"	d
abtBLOCKING_PRIORITY	AbortDelay.c	102;"	d	file:
abtCONTROLLING_PRIORITY	AbortDelay.c	98;"	d	file:
abtDELAY_ABORTS	AbortDelay.c	108;"	d	file:
abtDELAY_UNTIL_ABORTS	AbortDelay.c	109;"	d	file:
abtEVENT_GROUP_ABORTS	AbortDelay.c	111;"	d	file:
abtMAX_TESTS	AbortDelay.c	113;"	d	file:
abtNOTIFY_TAKE_ABORTS	AbortDelay.c	107;"	d	file:
abtNOTIFY_WAIT_ABORTS	AbortDelay.c	106;"	d	file:
abtQUEUE_SEND_ABORTS	AbortDelay.c	112;"	d	file:
abtSEMAPHORE_TAKE_ABORTS	AbortDelay.c	110;"	d	file:
bktALLOWABLE_MARGIN	blocktim.c	97;"	d	file:
bktDONT_BLOCK	blocktim.c	99;"	d	file:
bktPRIMARY_BLOCK_TIME	blocktim.c	96;"	d	file:
bktPRIMARY_PRIORITY	blocktim.c	86;"	d	file:
bktQUEUE_LENGTH	blocktim.c	94;"	d	file:
bktRUN_INDICATOR	blocktim.c	100;"	d	file:
bktSECONDARY_PRIORITY	blocktim.c	90;"	d	file:
bktSHORT_WAIT	blocktim.c	95;"	d	file:
bktTIME_TO_BLOCK	blocktim.c	98;"	d	file:
blckqNUM_TASK_SETS	BlockQ.c	105;"	d	file:
blckqSTACK_SIZE	BlockQ.c	104;"	d	file:
configTIMER_TASK_PRIORITY	blocktim.c	105;"	d	file:
countDONT_BLOCK	countsem.c	96;"	d	file:
countMAX_COUNT_VALUE	countsem.c	84;"	d	file:
countNUM_TEST_TASKS	countsem.c	95;"	d	file:
countSTART_AT_MAX_COUNT	countsem.c	90;"	d	file:
countSTART_AT_ZERO	countsem.c	91;"	d	file:
deathSTACK_SIZE	death.c	99;"	d	file:
eEqualPriority	QueueSet.c	/^	eEqualPriority = 0,	\/* Tx and Rx tasks have the same priority. *\/$/;"	e	enum:__anon1	file:
eRelativePriorities	QueueSet.c	/^} eRelativePriorities;$/;"	t	typeref:enum:__anon1	file:
eTxHigherPriority	QueueSet.c	/^	eTxHigherPriority,	\/* The priority of the Tx task is above that of the Rx task. *\/$/;"	e	enum:__anon1	file:
eTxLowerPriority	QueueSet.c	/^	eTxLowerPriority	\/* The priority of the Tx task is below that of the Rx task. *\/$/;"	e	enum:__anon1	file:
ebALL_BITS	EventGroupsDemo.c	111;"	d	file:
ebALL_SYNC_BITS	EventGroupsDemo.c	119;"	d	file:
ebBIT_0	EventGroupsDemo.c	100;"	d	file:
ebBIT_1	EventGroupsDemo.c	101;"	d	file:
ebBIT_2	EventGroupsDemo.c	102;"	d	file:
ebBIT_3	EventGroupsDemo.c	103;"	d	file:
ebBIT_4	EventGroupsDemo.c	104;"	d	file:
ebBIT_5	EventGroupsDemo.c	105;"	d	file:
ebBIT_6	EventGroupsDemo.c	106;"	d	file:
ebBIT_7	EventGroupsDemo.c	107;"	d	file:
ebCOMBINED_BITS	EventGroupsDemo.c	110;"	d	file:
ebDONT_BLOCK	EventGroupsDemo.c	122;"	d	file:
ebRENDESVOUS_TASK_1_SYNC_BIT	EventGroupsDemo.c	117;"	d	file:
ebRENDESVOUS_TASK_2_SYNC_BIT	EventGroupsDemo.c	118;"	d	file:
ebSELECTIVE_BITS_1	EventGroupsDemo.c	129;"	d	file:
ebSELECTIVE_BITS_2	EventGroupsDemo.c	130;"	d	file:
ebSET_BIT_TASK_PRIORITY	EventGroupsDemo.c	96;"	d	file:
ebSET_BIT_TASK_SYNC_BIT	EventGroupsDemo.c	115;"	d	file:
ebSHORT_DELAY	EventGroupsDemo.c	125;"	d	file:
ebWAIT_BIT_TASK_PRIORITY	EventGroupsDemo.c	97;"	d	file:
ebWAIT_BIT_TASK_SYNC_BIT	EventGroupsDemo.c	116;"	d	file:
genqMUTEX_HIGH_PRIORITY	GenQTest.c	98;"	d	file:
genqMUTEX_LOW_PRIORITY	GenQTest.c	95;"	d	file:
genqMUTEX_MEDIUM_PRIORITY	GenQTest.c	97;"	d	file:
genqMUTEX_TEST_PRIORITY	GenQTest.c	96;"	d	file:
genqQUEUE_LENGTH	GenQTest.c	92;"	d	file:
intgCONST1	integer.c	87;"	d	file:
intgCONST2	integer.c	88;"	d	file:
intgCONST3	integer.c	89;"	d	file:
intgCONST4	integer.c	90;"	d	file:
intgEXPECTED_ANSWER	integer.c	91;"	d	file:
intgNUMBER_OF_TASKS	integer.c	96;"	d	file:
intgSTACK_SIZE	integer.c	93;"	d	file:
intsemINTERRUPT_MUTEX_GIVE_PERIOD_MS	IntSemTest.c	93;"	d	file:
intsemMASTER_PRIORITY	IntSemTest.c	89;"	d	file:
intsemMAX_COUNT	IntSemTest.c	100;"	d	file:
intsemNO_BLOCK	GenQTest.c	93;"	d	file:
intsemNO_BLOCK	IntSemTest.c	96;"	d	file:
intsemSLAVE_PRIORITY	IntSemTest.c	90;"	d	file:
mathNUMBER_OF_TASKS	flop.c	98;"	d	file:
mathSTACK_SIZE	flop.c	95;"	d	file:
notifyTASK_PRIORITY	TaskNotify.c	86;"	d	file:
notifyUINT32_MAX	TaskNotify.c	87;"	d	file:
pcBlockingTaskName	AbortDelay.c	/^static const char *pcControllingTaskName = "AbtCtrl", *pcBlockingTaskName = "AbtBlk";$/;"	v	file:
pcControllingTaskName	AbortDelay.c	/^static const char *pcControllingTaskName = "AbtCtrl", *pcBlockingTaskName = "AbtBlk";$/;"	v	file:
pollqCONSUMER_DELAY	PollQ.c	113;"	d	file:
pollqINITIAL_VALUE	PollQ.c	116;"	d	file:
pollqNO_DELAY	PollQ.c	114;"	d	file:
pollqPRODUCER_DELAY	PollQ.c	112;"	d	file:
pollqQUEUE_SIZE	PollQ.c	111;"	d	file:
pollqSTACK_SIZE	PollQ.c	110;"	d	file:
pollqVALUES_TO_PRODUCE	PollQ.c	115;"	d	file:
portTASK_FUNCTION	BlockQ.c	/^static portTASK_FUNCTION( vBlockingQueueConsumer, pvParameters )$/;"	f	file:
portTASK_FUNCTION	BlockQ.c	/^static portTASK_FUNCTION( vBlockingQueueProducer, pvParameters )$/;"	f	file:
portTASK_FUNCTION	PollQ.c	/^static portTASK_FUNCTION( vPolledQueueConsumer, pvParameters )$/;"	f	file:
portTASK_FUNCTION	PollQ.c	/^static portTASK_FUNCTION( vPolledQueueProducer, pvParameters )$/;"	f	file:
portTASK_FUNCTION	death.c	/^static portTASK_FUNCTION( vCreateTasks, pvParameters )$/;"	f	file:
portTASK_FUNCTION	death.c	/^static portTASK_FUNCTION( vSuicidalTask, pvParameters )$/;"	f	file:
portTASK_FUNCTION	dynamic.c	/^static portTASK_FUNCTION( vContinuousIncrementTask, pvParameters )$/;"	f	file:
portTASK_FUNCTION	dynamic.c	/^static portTASK_FUNCTION( vCounterControlTask, pvParameters )$/;"	f	file:
portTASK_FUNCTION	dynamic.c	/^static portTASK_FUNCTION( vLimitedIncrementTask, pvParameters )$/;"	f	file:
portTASK_FUNCTION	dynamic.c	/^static portTASK_FUNCTION( vQueueReceiveWhenSuspendedTask, pvParameters )$/;"	f	file:
portTASK_FUNCTION	dynamic.c	/^static portTASK_FUNCTION( vQueueSendWhenSuspendedTask, pvParameters )$/;"	f	file:
portTASK_FUNCTION	flop.c	/^static portTASK_FUNCTION( vCompetingMathTask1, pvParameters )$/;"	f	file:
portTASK_FUNCTION	flop.c	/^static portTASK_FUNCTION( vCompetingMathTask2, pvParameters )$/;"	f	file:
portTASK_FUNCTION	flop.c	/^static portTASK_FUNCTION( vCompetingMathTask3, pvParameters )$/;"	f	file:
portTASK_FUNCTION	flop.c	/^static portTASK_FUNCTION( vCompetingMathTask4, pvParameters )$/;"	f	file:
portTASK_FUNCTION	integer.c	/^static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )$/;"	f	file:
portTASK_FUNCTION	semtest.c	/^static portTASK_FUNCTION( prvSemaphoreTest, pvParameters )$/;"	f	file:
priLOOPS	dynamic.c	152;"	d	file:
priMAX_COUNT	dynamic.c	153;"	d	file:
priNO_BLOCK	dynamic.c	154;"	d	file:
priSLEEP_TIME	dynamic.c	151;"	d	file:
priSTACK_SIZE	dynamic.c	150;"	d	file:
priSUSPENDED_QUEUE_LENGTH	dynamic.c	155;"	d	file:
prvAutoReloadTimerCallback	TimerDemo.c	/^static void prvAutoReloadTimerCallback( TimerHandle_t pxExpiredTimer )$/;"	f	file:
prvBasicDelayTests	blocktim.c	/^static void prvBasicDelayTests( void )$/;"	f	file:
prvBitCombinationTestMasterFunction	EventGroupsDemo.c	/^static BaseType_t prvBitCombinationTestMasterFunction( BaseType_t xError, TaskHandle_t xTestSlaveTaskHandle )$/;"	f	file:
prvBlockingTask	AbortDelay.c	/^static void prvBlockingTask( void *pvParameters )$/;"	f	file:
prvChangeRelativePriorities	QueueSet.c	/^static void prvChangeRelativePriorities( void )$/;"	f	file:
prvCheckExpectedTimeIsWithinAnAcceptableMargin	AbortDelay.c	/^static void prvCheckExpectedTimeIsWithinAnAcceptableMargin( TickType_t xStartTime, TickType_t xExpectedBlockTime )$/;"	f	file:
prvCheckReceivedValue	QueueSet.c	/^static void prvCheckReceivedValue( uint32_t ulReceived )$/;"	f	file:
prvCheckReceivedValueWithinExpectedRange	QueueSet.c	/^static BaseType_t prvCheckReceivedValueWithinExpectedRange( uint32_t ulReceived, uint32_t ulExpectedReceived )$/;"	f	file:
prvControllingTask	AbortDelay.c	/^static void prvControllingTask( void *pvParameters )$/;"	f	file:
prvCountingSemaphoreTask	countsem.c	/^static void prvCountingSemaphoreTask( void *pvParameters )$/;"	f	file:
prvDecrementSemaphoreCount	countsem.c	/^static void prvDecrementSemaphoreCount( SemaphoreHandle_t xSemaphore, UBaseType_t *puxLoopCounter )$/;"	f	file:
prvHighPriorityMutexTask	GenQTest.c	/^static void prvHighPriorityMutexTask( void *pvParameters )$/;"	f	file:
prvHighPriorityPeekTask	QPeek.c	/^static void prvHighPriorityPeekTask( void *pvParameters )$/;"	f	file:
prvHighestPriorityPeekTask	QPeek.c	/^static void prvHighestPriorityPeekTask( void *pvParameters )$/;"	f	file:
prvISRAutoReloadTimerCallback	TimerDemo.c	/^static void prvISRAutoReloadTimerCallback( TimerHandle_t pxExpiredTimer )$/;"	f	file:
prvISROneShotTimerCallback	TimerDemo.c	/^static void prvISROneShotTimerCallback( TimerHandle_t pxExpiredTimer )$/;"	f	file:
prvIncrementSemaphoreCount	countsem.c	/^static void prvIncrementSemaphoreCount( SemaphoreHandle_t xSemaphore, UBaseType_t *puxLoopCounter )$/;"	f	file:
prvLowPriorityMutexTask	GenQTest.c	/^static void prvLowPriorityMutexTask( void *pvParameters )$/;"	f	file:
prvLowPriorityPeekTask	QPeek.c	/^static void prvLowPriorityPeekTask( void *pvParameters )$/;"	f	file:
prvMediumPriorityMutexTask	GenQTest.c	/^static void prvMediumPriorityMutexTask( void *pvParameters )$/;"	f	file:
prvMediumPriorityPeekTask	QPeek.c	/^static void prvMediumPriorityPeekTask( void *pvParameters )$/;"	f	file:
prvNotifiedTask	TaskNotify.c	/^static void prvNotifiedTask( void *pvParameters )$/;"	f	file:
prvNotifyingTimer	TaskNotify.c	/^static void prvNotifyingTimer( TimerHandle_t xNotUsed )$/;"	f	file:
prvOneShotTimerCallback	TimerDemo.c	/^static void prvOneShotTimerCallback( TimerHandle_t pxExpiredTimer )$/;"	f	file:
prvPerformTaskSyncTests	EventGroupsDemo.c	/^static BaseType_t prvPerformTaskSyncTests( BaseType_t xError, TaskHandle_t xTestSlaveTaskHandle )$/;"	f	file:
prvQueueOverwriteTask	QueueOverwrite.c	/^static void prvQueueOverwriteTask( void *pvParameters )$/;"	f	file:
prvQueueSetReceivingTask	QueueSet.c	/^static void prvQueueSetReceivingTask( void *pvParameters )$/;"	f	file:
prvQueueSetReceivingTask	QueueSetPolling.c	/^static void prvQueueSetReceivingTask( void *pvParameters )$/;"	f	file:
prvQueueSetSendingTask	QueueSet.c	/^static void prvQueueSetSendingTask( void *pvParameters )$/;"	f	file:
prvRand	QueueSet.c	/^static size_t prvRand( void )$/;"	f	file:
prvRand	TaskNotify.c	/^static UBaseType_t prvRand( void )$/;"	f	file:
prvReceiveFromQueueInSetFromISR	QueueSet.c	/^static void prvReceiveFromQueueInSetFromISR( void )$/;"	f	file:
prvRecursiveMutexBlockingTask	recmutex.c	/^static void prvRecursiveMutexBlockingTask( void *pvParameters )$/;"	f	file:
prvRecursiveMutexControllingTask	recmutex.c	/^static void prvRecursiveMutexControllingTask( void *pvParameters )$/;"	f	file:
prvRecursiveMutexPollingTask	recmutex.c	/^static void prvRecursiveMutexPollingTask( void *pvParameters )$/;"	f	file:
prvResetStartConditionsForNextIteration	TimerDemo.c	/^static void prvResetStartConditionsForNextIteration( void )$/;"	f	file:
prvSRand	QueueSet.c	/^static void prvSRand( size_t uxSeed )$/;"	f	file:
prvSelectiveBitsTestMasterFunction	EventGroupsDemo.c	/^static BaseType_t prvSelectiveBitsTestMasterFunction( void )$/;"	f	file:
prvSelectiveBitsTestSlaveFunction	EventGroupsDemo.c	/^static void prvSelectiveBitsTestSlaveFunction( void )$/;"	f	file:
prvSendFrontAndBackTest	GenQTest.c	/^static void prvSendFrontAndBackTest( void *pvParameters )$/;"	f	file:
prvSendToQueueInSetFromISR	QueueSet.c	/^static void prvSendToQueueInSetFromISR( void )$/;"	f	file:
prvSetupTest	QueueSet.c	/^static void prvSetupTest( void )$/;"	f	file:
prvSingleTaskTests	TaskNotify.c	/^static void prvSingleTaskTests( void )$/;"	f	file:
prvSyncTask	EventGroupsDemo.c	/^static void prvSyncTask( void *pvParameters )$/;"	f	file:
prvTakeAndGiveInTheOppositeOrder	IntSemTest.c	/^static void prvTakeAndGiveInTheOppositeOrder( void )$/;"	f	file:
prvTakeAndGiveInTheSameOrder	IntSemTest.c	/^static void prvTakeAndGiveInTheSameOrder( void )$/;"	f	file:
prvTakeTwoMutexesReturnInDifferentOrder	GenQTest.c	/^static void prvTakeTwoMutexesReturnInDifferentOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xLocalMutex )$/;"	f	file:
prvTakeTwoMutexesReturnInSameOrder	GenQTest.c	/^static void prvTakeTwoMutexesReturnInSameOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xLocalMutex )$/;"	f	file:
prvTest1_CreateTimersWithoutSchedulerRunning	TimerDemo.c	/^static void prvTest1_CreateTimersWithoutSchedulerRunning( void )$/;"	f	file:
prvTest2_CheckTaskAndTimersInitialState	TimerDemo.c	/^static void prvTest2_CheckTaskAndTimersInitialState( void )$/;"	f	file:
prvTest3_CheckAutoReloadExpireRates	TimerDemo.c	/^static void	prvTest3_CheckAutoReloadExpireRates( void )$/;"	f	file:
prvTest4_CheckAutoReloadTimersCanBeStopped	TimerDemo.c	/^static void prvTest4_CheckAutoReloadTimersCanBeStopped( void )$/;"	f	file:
prvTest5_CheckBasicOneShotTimerBehaviour	TimerDemo.c	/^static void prvTest5_CheckBasicOneShotTimerBehaviour( void )$/;"	f	file:
prvTest6_CheckAutoReloadResetBehaviour	TimerDemo.c	/^static void prvTest6_CheckAutoReloadResetBehaviour( void )$/;"	f	file:
prvTestAbortingEventGroupWait	AbortDelay.c	/^static void prvTestAbortingEventGroupWait( void )$/;"	f	file:
prvTestAbortingQueueSend	AbortDelay.c	/^static void prvTestAbortingQueueSend( void )$/;"	f	file:
prvTestAbortingSemaphoreTake	AbortDelay.c	/^static void prvTestAbortingSemaphoreTake( void )$/;"	f	file:
prvTestAbortingTaskDelay	AbortDelay.c	/^static void prvTestAbortingTaskDelay( void )$/;"	f	file:
prvTestAbortingTaskDelayUntil	AbortDelay.c	/^static void prvTestAbortingTaskDelayUntil( void )$/;"	f	file:
prvTestAbortingTaskNotifyTake	AbortDelay.c	/^static void prvTestAbortingTaskNotifyTake( void )$/;"	f	file:
prvTestAbortingTaskNotifyWait	AbortDelay.c	/^static void prvTestAbortingTaskNotifyWait( void )$/;"	f	file:
prvTestMasterTask	EventGroupsDemo.c	/^static void prvTestMasterTask( void *pvParameters )$/;"	f	file:
prvTestSlaveTask	EventGroupsDemo.c	/^static void prvTestSlaveTask( void *pvParameters )$/;"	f	file:
prvTimerTestTask	TimerDemo.c	/^static void prvTimerTestTask( void *pvParameters )$/;"	f	file:
psCheckVariable	BlockQ.c	/^	volatile short *psCheckVariable;	\/*< Incremented on each successful cycle to check the task is still running. *\/$/;"	m	struct:BLOCKING_QUEUE_PARAMETERS	file:
pulSharedVariable	semtest.c	/^	volatile uint32_t *pulSharedVariable;$/;"	m	struct:SEMAPHORE_PARAMETERS	file:
qoDONT_BLOCK	QueueOverwrite.c	84;"	d	file:
qoLOOPS	QueueOverwrite.c	87;"	d	file:
qpeekHIGHEST_PRIORITY	QPeek.c	95;"	d	file:
qpeekHIGH_PRIORITY	QPeek.c	94;"	d	file:
qpeekLOW_PRIORITY	QPeek.c	92;"	d	file:
qpeekMEDIUM_PRIORITY	QPeek.c	93;"	d	file:
qpeekNO_BLOCK	QPeek.c	89;"	d	file:
qpeekQUEUE_LENGTH	QPeek.c	88;"	d	file:
qpeekSHORT_DELAY	QPeek.c	90;"	d	file:
queuesetALLOWABLE_RX_DEVIATION	QueueSet.c	131;"	d	file:
queuesetDONT_BLOCK	QueueSet.c	104;"	d	file:
queuesetIGNORED_BOUNDARY	QueueSet.c	135;"	d	file:
queuesetINITIAL_ISR_TX_VALUE	QueueSet.c	109;"	d	file:
queuesetISR_TX_PERIOD	QueueSet.c	120;"	d	file:
queuesetISR_TX_PERIOD	QueueSetPolling.c	103;"	d	file:
queuesetLOW_PRIORITY	QueueSet.c	112;"	d	file:
queuesetMEDIUM_PRIORITY	QueueSet.c	113;"	d	file:
queuesetNUM_QUEUES_IN_SET	QueueSet.c	97;"	d	file:
queuesetPRIORITY_CHANGE_LOOPS	QueueSet.c	117;"	d	file:
queuesetQUEUE_LENGTH	QueueSet.c	100;"	d	file:
queuesetSHORT_DELAY	QueueSet.c	103;"	d	file:
queuesetTX_LOOP_DELAY	QueueSet.c	125;"	d	file:
recmu15ms_DELAY	recmutex.c	128;"	d	file:
recmuBLOCKING_TASK_PRIORITY	recmutex.c	119;"	d	file:
recmuCONTROLLING_TASK_PRIORITY	recmutex.c	117;"	d	file:
recmuMAX_COUNT	recmutex.c	123;"	d	file:
recmuNO_DELAY	recmutex.c	127;"	d	file:
recmuPOLLING_TASK_PRIORITY	recmutex.c	120;"	d	file:
recmuSHORT_DELAY	recmutex.c	126;"	d	file:
sBlockingConsumerCount	BlockQ.c	/^static volatile short sBlockingConsumerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };$/;"	v	file:
sBlockingProducerCount	BlockQ.c	/^static volatile short sBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };$/;"	v	file:
sCheckVariables	semtest.c	/^static volatile short sCheckVariables[ semtstNUM_TASKS ] = { 0 };$/;"	v	file:
sNextCheckVariable	semtest.c	/^static volatile short sNextCheckVariable = 0;$/;"	v	file:
semtstBLOCKING_EXPECTED_VALUE	semtest.c	105;"	d	file:
semtstDELAY_FACTOR	semtest.c	112;"	d	file:
semtstNON_BLOCKING_EXPECTED_VALUE	semtest.c	106;"	d	file:
semtstNUM_TASKS	semtest.c	110;"	d	file:
semtstSTACK_SIZE	semtest.c	108;"	d	file:
setpollDONT_BLOCK	QueueSetPolling.c	100;"	d	file:
setpollQUEUE_LENGTH	QueueSetPolling.c	97;"	d	file:
tmrdemoDONT_BLOCK	TimerDemo.c	91;"	d	file:
tmrdemoONE_SHOT_TIMER_PERIOD	TimerDemo.c	92;"	d	file:
trmdemoNUM_TIMER_RESETS	TimerDemo.c	93;"	d	file:
ucAutoReloadTimerCounters	TimerDemo.c	/^static uint8_t ucAutoReloadTimerCounters[ configTIMER_QUEUE_LENGTH + 1 ] = { 0 };$/;"	v	file:
ucISRAutoReloadTimerCounter	TimerDemo.c	/^static uint8_t ucISRAutoReloadTimerCounter = ( uint8_t ) 0;$/;"	v	file:
ucISROneShotTimerCounter	TimerDemo.c	/^static uint8_t ucISROneShotTimerCounter = ( uint8_t ) 0;$/;"	v	file:
ucOneShotTimerCounter	TimerDemo.c	/^static uint8_t ucOneShotTimerCounter = ( uint8_t ) 0;$/;"	v	file:
ulCounter	dynamic.c	/^static volatile uint32_t ulCounter;$/;"	v	file:
ulCountingSemaphoreLoops	IntSemTest.c	/^static volatile uint32_t ulMasterLoops = 0, ulCountingSemaphoreLoops = 0;$/;"	v	file:
ulCycleCounter	QueueSet.c	/^static volatile uint32_t ulCycleCounter = 0UL;$/;"	v	file:
ulCycleCounter	QueueSetPolling.c	/^static uint32_t ulCycleCounter = 0;$/;"	v	file:
ulExpectedValue	dynamic.c	/^static uint32_t ulExpectedValue = ( uint32_t ) 0;$/;"	v	file:
ulGuardedVariable	GenQTest.c	/^static volatile uint32_t ulGuardedVariable = 0;$/;"	v	file:
ulISRCycles	EventGroupsDemo.c	/^static volatile uint32_t ulTestMasterCycles = 0, ulTestSlaveCycles = 0, ulISRCycles = 0;$/;"	v	file:
ulISRTxValue	QueueSet.c	/^static volatile uint32_t ulISRTxValue = queuesetINITIAL_ISR_TX_VALUE;$/;"	v	file:
ulLoopCounter	GenQTest.c	/^static volatile uint32_t ulLoopCounter = 0;$/;"	v	file:
ulLoopCounter	QPeek.c	/^static volatile uint32_t ulLoopCounter = 0;$/;"	v	file:
ulLoopCounter	QueueOverwrite.c	/^static uint32_t ulLoopCounter = 0;$/;"	v	file:
ulLoopCounter	TimerDemo.c	/^static volatile uint32_t ulLoopCounter = 0;$/;"	v	file:
ulLoopCounter2	GenQTest.c	/^static volatile uint32_t ulLoopCounter2 = 0;$/;"	v	file:
ulMasterLoops	IntSemTest.c	/^static volatile uint32_t ulMasterLoops = 0, ulCountingSemaphoreLoops = 0;$/;"	v	file:
ulNotifyCycleCount	TaskNotify.c	/^static volatile uint32_t ulNotifyCycleCount = 0;$/;"	v	file:
ulQueueUsedCounter	QueueSet.c	/^static uint32_t ulQueueUsedCounter[ queuesetNUM_QUEUES_IN_SET ] = { 0 };$/;"	v	file:
ulTestMasterCycles	EventGroupsDemo.c	/^static volatile uint32_t ulTestMasterCycles = 0, ulTestSlaveCycles = 0, ulISRCycles = 0;$/;"	v	file:
ulTestSlaveCycles	EventGroupsDemo.c	/^static volatile uint32_t ulTestMasterCycles = 0, ulTestSlaveCycles = 0, ulISRCycles = 0;$/;"	v	file:
ulTimerNotificationsReceived	TaskNotify.c	/^static uint32_t ulTimerNotificationsReceived = 0UL, ulTimerNotificationsSent = 0UL;$/;"	v	file:
ulTimerNotificationsSent	TaskNotify.c	/^static uint32_t ulTimerNotificationsReceived = 0UL, ulTimerNotificationsSent = 0UL;$/;"	v	file:
usCheckVariable	dynamic.c	/^static volatile uint16_t usCheckVariable = ( uint16_t ) 0;$/;"	v	file:
usCreationCount	death.c	/^static volatile uint16_t usCreationCount = 0;$/;"	v	file:
usTaskCheck	flop.c	/^static volatile uint16_t usTaskCheck[ mathNUMBER_OF_TASKS ] = { ( uint16_t ) 0 };$/;"	v	file:
uxBlockingCycles	recmutex.c	/^static volatile UBaseType_t uxControllingCycles = 0, uxBlockingCycles = 0, uxPollingCycles = 0;$/;"	v	file:
uxControllingCycles	recmutex.c	/^static volatile UBaseType_t uxControllingCycles = 0, uxBlockingCycles = 0, uxPollingCycles = 0;$/;"	v	file:
uxExpectedStartCount	countsem.c	/^	UBaseType_t uxExpectedStartCount;$/;"	m	struct:COUNT_SEM_STRUCT	file:
uxLoopCounter	countsem.c	/^	UBaseType_t uxLoopCounter;$/;"	m	struct:COUNT_SEM_STRUCT	file:
uxMaxNumberOfExtraTasksRunning	death.c	/^static const UBaseType_t uxMaxNumberOfExtraTasksRunning = 3;$/;"	v	file:
uxNextRand	QueueSet.c	/^static size_t uxNextRand = 0;$/;"	v	file:
uxNextRand	TaskNotify.c	/^static size_t uxNextRand = 0;$/;"	v	file:
uxPollingCycles	recmutex.c	/^static volatile UBaseType_t uxControllingCycles = 0, uxBlockingCycles = 0, uxPollingCycles = 0;$/;"	v	file:
uxTasksRunningAtStart	death.c	/^static volatile UBaseType_t uxTasksRunningAtStart = 0;$/;"	v	file:
vCreateAbortDelayTasks	AbortDelay.c	/^void vCreateAbortDelayTasks( void )$/;"	f
vCreateBlockTimeTasks	blocktim.c	/^void vCreateBlockTimeTasks( void )$/;"	f
vCreateSuicidalTasks	death.c	/^void vCreateSuicidalTasks( UBaseType_t uxPriority )$/;"	f
vInterruptCountingSemaphoreTask	IntSemTest.c	/^static void vInterruptCountingSemaphoreTask( void *pvParameters )$/;"	f	file:
vInterruptMutexMasterTask	IntSemTest.c	/^static void vInterruptMutexMasterTask( void *pvParameters )$/;"	f	file:
vInterruptMutexSlaveTask	IntSemTest.c	/^static void vInterruptMutexSlaveTask( void *pvParameters )$/;"	f	file:
vInterruptSemaphorePeriodicTest	IntSemTest.c	/^void vInterruptSemaphorePeriodicTest( void )$/;"	f
vPeriodicEventGroupsProcessing	EventGroupsDemo.c	/^void vPeriodicEventGroupsProcessing( void )$/;"	f
vPrimaryBlockTimeTestTask	blocktim.c	/^static void vPrimaryBlockTimeTestTask( void *pvParameters )$/;"	f	file:
vQueueOverwritePeriodicISRDemo	QueueOverwrite.c	/^void vQueueOverwritePeriodicISRDemo( void )$/;"	f
vQueueSetAccessQueueSetFromISR	QueueSet.c	/^void vQueueSetAccessQueueSetFromISR( void )$/;"	f
vQueueSetPollingInterruptAccess	QueueSetPolling.c	/^void vQueueSetPollingInterruptAccess( void )$/;"	f
vSecondaryBlockTimeTestTask	blocktim.c	/^static void vSecondaryBlockTimeTestTask( void *pvParameters )$/;"	f	file:
vStartBlockingQueueTasks	BlockQ.c	/^void vStartBlockingQueueTasks( UBaseType_t uxPriority )$/;"	f
vStartCountingSemaphoreTasks	countsem.c	/^void vStartCountingSemaphoreTasks( void )$/;"	f
vStartDynamicPriorityTasks	dynamic.c	/^void vStartDynamicPriorityTasks( void )$/;"	f
vStartEventGroupTasks	EventGroupsDemo.c	/^void vStartEventGroupTasks( void )$/;"	f
vStartGenericQueueTasks	GenQTest.c	/^void vStartGenericQueueTasks( UBaseType_t uxPriority )$/;"	f
vStartIntegerMathTasks	integer.c	/^void vStartIntegerMathTasks( UBaseType_t uxPriority )$/;"	f
vStartInterruptSemaphoreTasks	IntSemTest.c	/^void vStartInterruptSemaphoreTasks( void )$/;"	f
vStartMathTasks	flop.c	/^void vStartMathTasks( UBaseType_t uxPriority )$/;"	f
vStartPolledQueueTasks	PollQ.c	/^void vStartPolledQueueTasks( UBaseType_t uxPriority )$/;"	f
vStartQueueOverwriteTask	QueueOverwrite.c	/^void vStartQueueOverwriteTask( UBaseType_t uxPriority )$/;"	f
vStartQueuePeekTasks	QPeek.c	/^void vStartQueuePeekTasks( void )$/;"	f
vStartQueueSetPollingTask	QueueSetPolling.c	/^void vStartQueueSetPollingTask( void )$/;"	f
vStartQueueSetTasks	QueueSet.c	/^void vStartQueueSetTasks( void )$/;"	f
vStartRecursiveMutexTasks	recmutex.c	/^void vStartRecursiveMutexTasks( void )$/;"	f
vStartSemaphoreTasks	semtest.c	/^void vStartSemaphoreTasks( UBaseType_t uxPriority )$/;"	f
vStartTaskNotifyTask	TaskNotify.c	/^void vStartTaskNotifyTask( void  )$/;"	f
vStartTimerDemoTask	TimerDemo.c	/^void vStartTimerDemoTask( TickType_t xBasePeriodIn )$/;"	f
vTimerPeriodicISRTests	TimerDemo.c	/^void vTimerPeriodicISRTests( void )$/;"	f
xAllowableMargin	AbortDelay.c	/^const TickType_t xAllowableMargin = pdMS_TO_TICKS( 7 );$/;"	v
xAreAbortDelayTestTasksStillRunning	AbortDelay.c	/^BaseType_t xAreAbortDelayTestTasksStillRunning( void )$/;"	f
xAreBlockTimeTestTasksStillRunning	blocktim.c	/^BaseType_t xAreBlockTimeTestTasksStillRunning( void )$/;"	f
xAreBlockingQueuesStillRunning	BlockQ.c	/^BaseType_t xAreBlockingQueuesStillRunning( void )$/;"	f
xAreCountingSemaphoreTasksStillRunning	countsem.c	/^BaseType_t xAreCountingSemaphoreTasksStillRunning( void )$/;"	f
xAreDynamicPriorityTasksStillRunning	dynamic.c	/^BaseType_t xAreDynamicPriorityTasksStillRunning( void )$/;"	f
xAreEventGroupTasksStillRunning	EventGroupsDemo.c	/^BaseType_t xAreEventGroupTasksStillRunning( void )$/;"	f
xAreGenericQueueTasksStillRunning	GenQTest.c	/^BaseType_t xAreGenericQueueTasksStillRunning( void )$/;"	f
xAreIntegerMathsTaskStillRunning	integer.c	/^BaseType_t xAreIntegerMathsTaskStillRunning( void )$/;"	f
xAreInterruptSemaphoreTasksStillRunning	IntSemTest.c	/^BaseType_t xAreInterruptSemaphoreTasksStillRunning( void )$/;"	f
xAreMathsTaskStillRunning	flop.c	/^BaseType_t xAreMathsTaskStillRunning( void )$/;"	f
xArePollingQueuesStillRunning	PollQ.c	/^BaseType_t xArePollingQueuesStillRunning( void )$/;"	f
xAreQueuePeekTasksStillRunning	QPeek.c	/^BaseType_t xAreQueuePeekTasksStillRunning( void )$/;"	f
xAreQueueSetPollTasksStillRunning	QueueSetPolling.c	/^BaseType_t xAreQueueSetPollTasksStillRunning( void )$/;"	f
xAreQueueSetTasksStillRunning	QueueSet.c	/^BaseType_t xAreQueueSetTasksStillRunning( void )$/;"	f
xAreRecursiveMutexTasksStillRunning	recmutex.c	/^BaseType_t xAreRecursiveMutexTasksStillRunning( void )$/;"	f
xAreSemaphoreTasksStillRunning	semtest.c	/^BaseType_t xAreSemaphoreTasksStillRunning( void )$/;"	f
xAreTaskNotificationTasksStillRunning	TaskNotify.c	/^BaseType_t xAreTaskNotificationTasksStillRunning( void )$/;"	f
xAreTimerDemoTasksStillRunning	TimerDemo.c	/^BaseType_t xAreTimerDemoTasksStillRunning( TickType_t xCycleFrequency )$/;"	f
xAutoReloadTimers	TimerDemo.c	/^static TimerHandle_t xAutoReloadTimers[ configTIMER_QUEUE_LENGTH + 1 ] = { 0 };$/;"	v	file:
xBasePeriod	TimerDemo.c	/^static TickType_t xBasePeriod = 0;$/;"	v	file:
xBlockTime	BlockQ.c	/^	TickType_t xBlockTime;				\/*< The block time to use on queue reads\/writes. *\/$/;"	m	struct:BLOCKING_QUEUE_PARAMETERS	file:
xBlockTime	semtest.c	/^	TickType_t xBlockTime;$/;"	m	struct:SEMAPHORE_PARAMETERS	file:
xBlockingCycles	AbortDelay.c	/^static volatile BaseType_t xControllingCycles = 0, xBlockingCycles = 0;$/;"	v	file:
xBlockingIsSuspended	recmutex.c	/^static volatile BaseType_t xErrorOccurred = pdFALSE, xControllingIsSuspended = pdFALSE, xBlockingIsSuspended = pdFALSE;$/;"	v	file:
xBlockingQueueParameters	BlockQ.c	/^} xBlockingQueueParameters;$/;"	t	typeref:struct:BLOCKING_QUEUE_PARAMETERS	file:
xBlockingTaskHandle	recmutex.c	/^static TaskHandle_t xControllingTaskHandle, xBlockingTaskHandle;$/;"	v	file:
xContinuousIncrementHandle	dynamic.c	/^static TaskHandle_t xContinuousIncrementHandle, xLimitedIncrementHandle;$/;"	v	file:
xControllingCycles	AbortDelay.c	/^static volatile BaseType_t xControllingCycles = 0, xBlockingCycles = 0;$/;"	v	file:
xControllingIsSuspended	recmutex.c	/^static volatile BaseType_t xErrorOccurred = pdFALSE, xControllingIsSuspended = pdFALSE, xBlockingIsSuspended = pdFALSE;$/;"	v	file:
xControllingTaskHandle	recmutex.c	/^static TaskHandle_t xControllingTaskHandle, xBlockingTaskHandle;$/;"	v	file:
xCountSemStruct	countsem.c	/^} xCountSemStruct;$/;"	t	typeref:struct:COUNT_SEM_STRUCT	file:
xCreatedTask	death.c	/^TaskHandle_t xCreatedTask;$/;"	v
xErrorDetected	GenQTest.c	/^static volatile BaseType_t xErrorDetected = pdFALSE;$/;"	v	file:
xErrorDetected	IntSemTest.c	/^static volatile BaseType_t xErrorDetected = pdFALSE;$/;"	v	file:
xErrorDetected	QPeek.c	/^static volatile BaseType_t xErrorDetected = pdFALSE;$/;"	v	file:
xErrorDetected	countsem.c	/^static volatile BaseType_t xErrorDetected = pdFALSE;$/;"	v	file:
xErrorOccurred	AbortDelay.c	/^static volatile BaseType_t xErrorOccurred = pdFALSE;$/;"	v	file:
xErrorOccurred	blocktim.c	/^static volatile BaseType_t xErrorOccurred = pdFALSE;$/;"	v	file:
xErrorOccurred	recmutex.c	/^static volatile BaseType_t xErrorOccurred = pdFALSE, xControllingIsSuspended = pdFALSE, xBlockingIsSuspended = pdFALSE;$/;"	v	file:
xErrorStatus	TaskNotify.c	/^static BaseType_t xErrorStatus = pdPASS;$/;"	v	file:
xEventGroup	EventGroupsDemo.c	/^static EventGroupHandle_t xEventGroup = NULL;$/;"	v	file:
xHalfMaxBlockTime	AbortDelay.c	/^const TickType_t xHalfMaxBlockTime = pdMS_TO_TICKS( 50 );$/;"	v
xHighPriorityMutexTask	GenQTest.c	/^static TaskHandle_t xHighPriorityMutexTask, xMediumPriorityMutexTask;$/;"	v	file:
xHighPriorityTask	QPeek.c	/^TaskHandle_t xMediumPriorityTask, xHighPriorityTask, xHighestPriorityTask;$/;"	v
xHighestPriorityTask	QPeek.c	/^TaskHandle_t xMediumPriorityTask, xHighPriorityTask, xHighestPriorityTask;$/;"	v
xISRAutoReloadTimer	TimerDemo.c	/^static TimerHandle_t xISRAutoReloadTimer = NULL;$/;"	v	file:
xISRCountingSemaphore	IntSemTest.c	/^static SemaphoreHandle_t xISRCountingSemaphore = NULL;$/;"	v	file:
xISREventGroup	EventGroupsDemo.c	/^static EventGroupHandle_t xISREventGroup = NULL;$/;"	v	file:
xISRMutex	IntSemTest.c	/^static SemaphoreHandle_t xISRMutex = NULL;$/;"	v	file:
xISROneShotTimer	TimerDemo.c	/^static TimerHandle_t xISROneShotTimer = NULL;$/;"	v	file:
xISRQueue	QueueOverwrite.c	/^static QueueHandle_t xISRQueue = NULL;$/;"	v	file:
xISRTestStatus	QueueOverwrite.c	/^static BaseType_t xISRTestStatus = pdPASS;$/;"	v	file:
xInterruptGivePeriod	IntSemTest.c	/^const TickType_t xInterruptGivePeriod = pdMS_TO_TICKS( intsemINTERRUPT_MUTEX_GIVE_PERIOD_MS );$/;"	v
xIsCreateTaskStillRunning	death.c	/^BaseType_t xIsCreateTaskStillRunning( void )$/;"	f
xIsQueueOverwriteTaskStillRunning	QueueOverwrite.c	/^BaseType_t xIsQueueOverwriteTaskStillRunning( void )$/;"	f
xLimitedIncrementHandle	dynamic.c	/^static TaskHandle_t xContinuousIncrementHandle, xLimitedIncrementHandle;$/;"	v	file:
xMasterSlaveMutex	IntSemTest.c	/^static SemaphoreHandle_t xMasterSlaveMutex = NULL;$/;"	v	file:
xMaxBlockTime	AbortDelay.c	/^const TickType_t xMaxBlockTime = pdMS_TO_TICKS( 100 );$/;"	v
xMediumPriorityMutexTask	GenQTest.c	/^static TaskHandle_t xHighPriorityMutexTask, xMediumPriorityMutexTask;$/;"	v	file:
xMediumPriorityTask	QPeek.c	/^TaskHandle_t xMediumPriorityTask, xHighPriorityTask, xHighestPriorityTask;$/;"	v
xMutex	recmutex.c	/^static SemaphoreHandle_t xMutex;$/;"	v	file:
xNotifyTaskFromISR	TaskNotify.c	/^void xNotifyTaskFromISR( void )$/;"	f
xOkToGiveCountingSemaphore	IntSemTest.c	/^static BaseType_t xOkToGiveMutex = pdFALSE, xOkToGiveCountingSemaphore = pdFALSE;$/;"	v	file:
xOkToGiveMutex	IntSemTest.c	/^static BaseType_t xOkToGiveMutex = pdFALSE, xOkToGiveCountingSemaphore = pdFALSE;$/;"	v	file:
xOneShotTimer	TimerDemo.c	/^static TimerHandle_t xOneShotTimer = NULL;$/;"	v	file:
xParameters	countsem.c	/^static volatile xCountSemStruct xParameters[ countNUM_TEST_TASKS ];$/;"	v	file:
xPollingConsumerCount	PollQ.c	/^static volatile BaseType_t xPollingConsumerCount = pollqINITIAL_VALUE, xPollingProducerCount = pollqINITIAL_VALUE;$/;"	v	file:
xPollingProducerCount	PollQ.c	/^static volatile BaseType_t xPollingConsumerCount = pollqINITIAL_VALUE, xPollingProducerCount = pollqINITIAL_VALUE;$/;"	v	file:
xPrimaryCycles	blocktim.c	/^static volatile BaseType_t xPrimaryCycles = 0, xSecondaryCycles = 0;$/;"	v	file:
xQueue	BlockQ.c	/^	QueueHandle_t xQueue;					\/*< The queue to be used by the task. *\/$/;"	m	struct:BLOCKING_QUEUE_PARAMETERS	file:
xQueue	QueueSetPolling.c	/^static QueueHandle_t xQueue = NULL;$/;"	v	file:
xQueueSet	QueueSet.c	/^static QueueSetHandle_t xQueueSet;$/;"	v	file:
xQueueSet	QueueSetPolling.c	/^static QueueSetHandle_t xQueueSet = NULL;$/;"	v	file:
xQueueSetPollStatus	QueueSetPolling.c	/^static volatile BaseType_t xQueueSetPollStatus = pdPASS;$/;"	v	file:
xQueueSetReceivingTask	QueueSet.c	/^TaskHandle_t xQueueSetSendingTask, xQueueSetReceivingTask;$/;"	v
xQueueSetSendingTask	QueueSet.c	/^TaskHandle_t xQueueSetSendingTask, xQueueSetReceivingTask;$/;"	v
xQueueSetTasksStatus	QueueSet.c	/^static volatile BaseType_t xQueueSetTasksStatus = pdPASS;$/;"	v	file:
xQueues	QueueSet.c	/^static QueueHandle_t xQueues[ queuesetNUM_QUEUES_IN_SET ] = { 0 };$/;"	v	file:
xRunIndicator	blocktim.c	/^static volatile UBaseType_t xRunIndicator;$/;"	v	file:
xSecondary	blocktim.c	/^static TaskHandle_t xSecondary;$/;"	v	file:
xSecondaryCycles	blocktim.c	/^static volatile BaseType_t xPrimaryCycles = 0, xSecondaryCycles = 0;$/;"	v	file:
xSemaphore	countsem.c	/^	SemaphoreHandle_t xSemaphore;$/;"	m	struct:COUNT_SEM_STRUCT	file:
xSemaphore	semtest.c	/^	SemaphoreHandle_t xSemaphore;$/;"	m	struct:SEMAPHORE_PARAMETERS	file:
xSemaphoreParameters	semtest.c	/^} xSemaphoreParameters;$/;"	t	typeref:struct:SEMAPHORE_PARAMETERS	file:
xSetupComplete	QueueSet.c	/^static volatile BaseType_t xSetupComplete = pdFALSE;$/;"	v	file:
xSlaveHandle	IntSemTest.c	/^static TaskHandle_t xSlaveHandle;$/;"	v	file:
xSuspendedQueueReceiveError	dynamic.c	/^static volatile BaseType_t xSuspendedQueueReceiveError = pdFALSE;$/;"	v	file:
xSuspendedQueueSendError	dynamic.c	/^static volatile BaseType_t xSuspendedQueueSendError = pdFALSE;$/;"	v	file:
xSuspendedTestQueue	dynamic.c	/^QueueHandle_t xSuspendedTestQueue;$/;"	v
xSyncTask1	EventGroupsDemo.c	/^static TaskHandle_t xSyncTask1 = NULL, xSyncTask2 = NULL;$/;"	v	file:
xSyncTask2	EventGroupsDemo.c	/^static TaskHandle_t xSyncTask1 = NULL, xSyncTask2 = NULL;$/;"	v	file:
xTaskCheck	integer.c	/^static volatile BaseType_t xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( BaseType_t ) pdFALSE };$/;"	v	file:
xTaskToNotify	TaskNotify.c	/^static TaskHandle_t xTaskToNotify = NULL;$/;"	v	file:
xTestQueue	blocktim.c	/^static QueueHandle_t xTestQueue;$/;"	v	file:
xTestStatus	TimerDemo.c	/^static volatile BaseType_t xTestStatus = pdPASS;$/;"	v	file:
xTimer	TaskNotify.c	/^static TimerHandle_t xTimer = NULL;$/;"	v	file:
